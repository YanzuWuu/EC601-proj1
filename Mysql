#!/usr/bin/env python
# encoding: utf-8
import tweepy
import os
import wget
import subprocess
import io
from google.cloud import vision
from PIL import ImageDraw, Image, ImageFont
from PIL import Image
from time import time,localtime,asctime
import numpy as np
from collections import Counter

from bson.objectid import ObjectId

import pymysql

# def Create_base():
#     db = pymysql.connect(host='localhost',user='root', password='', port=3306)
#     cursor = db.cursor()
#     cursor.execute('SELECT VERSION()')
#     data = cursor.fetchone()
#     print('Database version:', data)
#     cursor.execute("CREATE DATABASE IF NOT EXISTS  Mini_Project3 DEFAULT CHARACTER SET utf8")
#
#     db.close()
#
# ##---------------Create Table---------------##
# def Create_table():
#     db = pymysql.connect(host='localhost', user='root', password='', port=3306, db='Mini_Project3')
#     cursor = db.cursor()
#     sql = 'CREATE TABLE IF NOT EXISTS Tweepy_Data (ID VARCHAR(255) NOT NULL, Twitter_ID VARCHAR(255) NOT NULL, Amount INT NOT NULL,' \
#           ' Descrition VARCHAR(255) NOT NULL,  PRIMARY KEY (id))'
#     cursor.execute(sql)
#     db.close()


os.environ['GOOGLE_APPLICATION_CREDENTIALS']= "My First Project-cb4eb253ff69.json"

def input_ID():
    screen_name = input("Type the new Twitter ID:")
    return screen_name



def get_all_tweets(screen_name):
        #Twitter only allows access to a users most recent 3240 tweets with this method
        consumer_key = 'P0ZYeebu0IiZ2yXDkJYMKa4QN'
        consumer_secret = '1o8drgPRXHxks3FhGLeNJbMXjPf8p3GbE0ywbdlRS1kpGEU5LO'
        access_token = '1037401110389174272-6iC08TC3wyhtB3QE5lzaipeM18KYe7'
        access_secret = 'TkxumYnCOj8zepySPctzFeKvDS9SFx82gKVjS6evfOjMe'
        #authorize twitter, initialize tweepy
        auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
        auth.set_access_token(access_token, access_secret)
        api = tweepy.API(auth)

        #screen_name = input_ID()

        #make initial request for most recent tweets (200 is the maximum allowed count)
        Twitter_Page = api.user_timeline(screen_name, count=20)
        Twitter_with_image=set()
        print('Downloading the Image from '+ screen_name + '.....')
        for status in Twitter_Page:
            media = status.entities.get('media', [])
            if (len(media) > 0):
                Twitter_with_image.add(media[0]['media_url'])
        i=0
        for url in Twitter_with_image:
            image=wget.download(url)
            os.rename(image, str(i) + '.jpg')
            i += 1

        print ('total 20 twitters & renamed %d jpgs' % (i))

        return i

# def rename(PATH):
#     filelist = os.listdir(PATH)
#     # total_num = len(filelist)
#     m = 0
#     for item in filelist:
#
#         if item.endswith('.jpg'):
#             m=m+1
#     print ('total 20 twitters & renamed %d jpgs' % (m))
#     return m

def conv_image():
     print('Converting the images to video....Processing')
     subprocess.call(['ffmpeg', '-r', '1', '-i', '%01d.jpg', '-vcodec', 'mpeg4','-y','video.mp4'])

client = vision.ImageAnnotatorClient()

def get_label(twitter_ID,m):
    db = pymysql.connect(host='localhost', user='root', password='Zyc19960127', port=3306, db='MyDbs')
    cursor = db.cursor()
    cursor.execute("use MyDbs")
    # user = input('Enter the username to Insert')
    time1 = asctime(localtime(time()))
    print('giving the labels')
    print('It will take some seconds...')

    idd = ''
    idddd = idd+twitter_ID
    time11 = time1 + idd
    for i in range(m):
        file_name = os.path.join(os.path.dirname(__file__), '%s.jpg'%(i))
        with io.open(file_name, 'rb') as image_file:
            content = image_file.read()

            image = vision.types.Image(content=content)

            response = client.label_detection(image=image)

            labels = response.label_annotations
        j = 0
        string=''
        for label in labels:
            string= string + label.description + ','

            #print(label.description)
            raw_image = Image.open(file_name)
            draw = ImageDraw.Draw(raw_image)
            font = ImageFont.truetype('/Library/Fonts/Times New Roman.ttf', 36)
            draw.text((50, 40 + j), label.description, fill=(0,0,0), font=font)
            j += 30
            raw_image.save(file_name)


        #sql = 'INSERT INTO twitter VALUES(%s,%d,%d,%s,%s)' % (twitter_ID, m, i, string, time)
        sql = 'INSERT INTO twitter (Twitter_ID, Total_image, image_ID, labels, Time) VALUES(%s,%s,%s,%s,%s)'
        VALUES = (idddd, m, i, string, time11)

        try:
            cursor.execute(sql,VALUES)
            db.commit()
            print('Successful updating')
        except:
            print('Updating failed!')
            db.rollback()
        # cursor.close()


    #return labels

def Create_table():
    db = pymysql.connect(host='localhost', user='root', password='Zyc19960127', port=3306, db='MyDbs')
    cursor = db.cursor()
    sql = 'CREATE TABLE IF NOT EXISTS twitter (Twitter_ID VARCHAR(255) NOT NULL, Total_image INT NOT NULL, image_ID INT NOT NULL, labels VARCHAR(255) NOT NULL, Time VARCHAR(255) NOT NULL)'
    cursor.execute(sql)
    db.close()


def user_interface():

    while(True):
        print("\n#############  Menu:  ############\n#     1.Show the database        #\n#     2.Add new TwitterID        #\n#     3.Delete a user            #\n#     4.Search keyword           #\n"
      "#     5.The most popular labels  #\n#     6.Delete the database      #\n#     7.Exit                     #\n##################################")
        x = 0
        while x is 0:
            try:
                x = int(input("Select an number: "))
                if 0 < x < 8:
                    continue
                else:
                    print("The number is out of range. Try again")
                    x = 0
            except ValueError:
                print("Please input number. Try again ")

        if ( x == 1):
            all_data()

        elif ( x == 2):
            #Create_table()
            twitter_ID=input_ID()

            #PATH=os.getcwd()
            m=get_all_tweets(twitter_ID)
            get_label(twitter_ID,m)

        elif ( x == 3):
            delete_user()

        elif ( x == 4):
            search_keyword()

        elif ( x == 5):
            popular()

        elif ( x == 6):
            delete_database()

        elif ( x== 7):
            return

def all_data():
    db = pymysql.connect(host='localhost', user='root', password='Zyc19960127', port=3306, db='MyDbs')
    cursor = db.cursor()
    cursor.execute('SELECT * FROM twitter')
    results= cursor.fetchall()
    db.commit()
    for user in results:
        print(user)

def delete_user():

    db = pymysql.connect(host='localhost', user='root', password='Zyc19960127', port=3306, db='MyDbs')
    cursor = db.cursor()

    delete_name = input("Delete the Twitter ID:")
    sql="DELETE FROM twitter WHERE Twitter_ID='%s'" % (delete_name)
    #print(delete_name)
    cursor.execute(sql)
    db.commit()


def delete_database():
    db = pymysql.connect(host='localhost', user='root', password='Zyc19960127', port=3306, db='MyDbs')
    cursor = db.cursor()
    cursor.execute("truncate twitter;")
    return

def search_keyword():

    db = pymysql.connect(host='localhost', user='root', password='Zyc19960127', port=3306, db='MyDbs')
    cursor = db.cursor()


    word = input("Type the keyword u want to search: ")
    cursor.execute(("SELECT * FROM twitter"))
    result = cursor.fetchall()
    twitter_IDs=[]
    for user in result:
        desc = user[3]
        desc = desc.split(',')
        if word in desc:
            twitter_IDs.append((user[0]))

    if twitter_IDs == []:
        print("There is no TitterID has the label (",word,") in their images.")
    else:
        print("These TitterID has the label (",word,") in their images:")
        # ignore the same users
        l = []
        for i in twitter_IDs:
            if not i in l:
                l.append(i)
        print(l)

def popular():

    db = pymysql.connect(host='localhost', user='root', password='Zyc19960127', port=3306, db='MyDbs')
    cursor = db.cursor()
    cursor.execute(("SELECT * FROM twitter"))
    result = cursor.fetchall()

    label = []
    for user in result:
        desc = user[3]
        desc = desc.split(',')
        label = np.append(desc, label)
    #print(label)
    label_counts = Counter(label)
    top_three = label_counts.most_common(4)
    print("The top three popular labels are:\n",top_three[1:])


if __name__ == '__main__':

    user_interface()
